/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nbt.seleniumwebparsermvn.forms;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Neibot
 */
public class ZooZooRuSearchDialog extends javax.swing.JDialog {
    
    private String[] columnNames;
    private ZooZooRuResultsViewForm parent;
    private TableModel model;
    
    public ZooZooRuSearchDialog(TableModel model, ZooZooRuResultsViewForm parent, boolean modal) {
        
        super(parent, modal);
        this.parent = parent;
        this.model = model;
        initComponents();
        this.setTitle("Фильтр по значению");
        this.setResizable(false);
        this.setLocationRelativeTo(parent);
                
        columnNames = new String[model.getColumnCount()];   // подготавливаем модель для списка     
        for (int i=0; i<columnNames.length; i++)
            columnNames[i] = model.getColumnName(i);
            
        jList1.setModel(new javax.swing.AbstractListModel() // и устанавливаем её
        {               
            @Override
            public int getSize() { return columnNames.length; }
            @Override
            public Object getElementAt(int i) { return columnNames[i]; }
        }); 
        
        this.setVisible(true);
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Значение, содержащееся в поле:");

        jLabel2.setText("Выберите столбец, по которому будем фильтровать:");

        filterButton.setText("Отфильтровать");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1)
                    .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if(!this.jList1.isSelectionEmpty()) // проверяем чтобы пользователь выбрал столбец
        {
            ArrayList <ArrayList<String>> tmpData = new ArrayList<>();
            
            for (int rowIndex = 0; rowIndex < model.getRowCount(); rowIndex++)   //ищем в модели совпадения             
                if (model.getValueAt(rowIndex, jList1.getSelectedIndex()).toString().toLowerCase().contains(jTextField1.getText().toLowerCase()))
                {
                    ArrayList<String> row = new ArrayList<>();
                    for (int columnIndex = 0; columnIndex < model.getColumnCount(); columnIndex++)
                        row.add(String.valueOf(model.getValueAt(rowIndex, columnIndex)));
                    tmpData.add(row);
                }
            
            if (tmpData.size()>0) //если совпадения нашлись
            {
                String[][] newData = new String[tmpData.size()][tmpData.get(0).size()];
                for (int rowIndex = 0; rowIndex < tmpData.size(); rowIndex++)   //перекладываем в массив, ибо модель принимает только массивы, либо Vector, который deprecated
                    for (int columnIndex = 0; columnIndex < tmpData.get(0).size(); columnIndex++)
                        newData[rowIndex][columnIndex] = tmpData.get(rowIndex).get(columnIndex);

                TableModel newModel = new DefaultTableModel (newData, columnNames);
                parent.updateModel(newModel); // обновляем модель в таблице
                this.dispose();
            }
            else
                JOptionPane.showMessageDialog(null, "Записей с таким значением не найдено!", "Внимание!", JOptionPane.WARNING_MESSAGE, null);            
        }
        else
            JOptionPane.showMessageDialog(null, "Выберите столбец!", "Ошибка", JOptionPane.ERROR_MESSAGE, null);
    }//GEN-LAST:event_filterButtonActionPerformed
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
